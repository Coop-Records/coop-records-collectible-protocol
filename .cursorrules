# Instructions

You are an expert Solidity developer focused on writing secure, gas-efficient, and maintainable smart contracts. Prioritize these qualities:

1. **Secure** - Follow best security practices:

   - Checks-Effects-Interactions pattern
   - Reentrancy guards
   - Access control
   - Input validation
   - Event emissions for state changes

2. **Gas-Efficient** - Optimize for gas usage:

   - Minimize storage operations
   - Use appropriate data types
   - Batch operations where possible
   - Cache frequently accessed storage variables

3. **Self-documenting** - Code explains itself through:

   - NatSpec documentation
   - Clear function and variable names
   - Event logging
   - Modular contract design

4. **Type-Safe** - Strict typing and validation:

   - Use custom types and enums
   - Explicit function visibility
   - Clear error messages
   - Input bounds checking

5. **Upgradeable** - Consider future maintenance:
   - Proxy patterns when needed
   - Storage gaps for upgradeable contracts
   - Clear upgrade paths
   - Proper event emissions

Before coding, make a plan inside a <thinking> tag.

1. Identify core requirement
2. Consider security implications
3. Plan gas optimizations
4. Verify with these questions:
   - What security risks exist?
   - Can this be more gas efficient?
   - Is the code clear to other developers?
   - Are events properly emitted?

For example:
<thinking>
Let me think through this step by step.
...
</thinking>

Good vs Bad code examples:

```solidity
// Bad
function transfer(address to, uint amount) public {
  balances[msg.sender] -= amount;
  balances[to] += amount;
}

// Good
function transfer(address to, uint256 amount) public {
  // Validate inputs
  require(to != address(0), "Invalid recipient");
  require(amount <= balances[msg.sender], "Insufficient balance");

  // Update state
  balances[msg.sender] -= amount;
  balances[to] += amount;

  // Emit event
  emit Transfer(msg.sender, to, amount);
}
```

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- Use foundry for testing and deployment
- Include proper NatSpec documentation for all contracts
- Always verify contracts after deployment
- For Abstract testnet deployments, use blockscout verifier
- Load environment variables with `source .env` before running forge commands
- Prefer CLI commands over code changes for deployment automation

## Cursor learned

- When deploying to Abstract testnet, use the `--zksync` flag
- Use `--verifier blockscout` and proper verifier URL for Abstract testnet contract verification
- Keep broadcast logs clean by only tracking `run-latest.json` files
- Use proper compiler version and optimization settings in foundry.toml for zkSync compatibility
- When using Forge with complex project structures, ensure all required directories are in the `allow_paths` section of foundry.toml
- When working with projects that use multiple import paths for the same contracts, standardize the imports to avoid verification issues

# Scratchpad

## Current Task: Refactor ZoraCreator1155Impl to CoopCreator1155Impl

### Task Description

Refactor the `ZoraCreator1155Impl` contract to be renamed as `CoopCreator1155Impl` as specified in the roadmap.

### Analysis & Requirements

1. Identify all occurrences of `ZoraCreator1155Impl` in the codebase
2. Rename the contract to `CoopCreator1155Impl`
3. Update all imports and references to the contract
4. Ensure all tests and deployment scripts continue to work

### Findings

1. Main Contract Location:

   - The `ZoraCreator1155Impl` contract is located at `packages/1155-contracts/src/nft/ZoraCreator1155Impl.sol`
   - It's a large contract (892 lines) that implements the core functionality for the 1155 token standard

2. Import References:

   - The contract is imported in multiple files across the codebase
   - Key files that import it include:
     - `packages/1155-deployments/src/ZoraDeployerBase.sol`
     - `packages/1155-deployments/src/ZoraDeployerUtils.sol`
     - Various test files in `packages/1155-contracts/test/`
     - Factory implementation in `packages/1155-contracts/src/factory/ZoraCreator1155FactoryImpl.sol`

3. Interface Dependencies:
   - The contract implements several interfaces, including `IZoraCreator1155` and `IZoraCreator1155Initializer`
   - These interfaces are defined in the `packages/1155-contracts/src/interfaces/` directory

### Action Plan

[X] Step 1: Locate the `ZoraCreator1155Impl` contract
[X] Step 2: Create a new `CoopCreator1155Impl` contract based on the existing implementation
[X] Rename the contract
[X] Update NatSpec documentation
[X] Keep all functionality the same
[X] Step 3: Update all imports and references
[X] Update imports in `ZoraDeployerBase.sol`
[X] Update imports in `ZoraDeployerUtils.sol`
[X] Update references in `ZoraCreator1155FactoryImpl.sol`
[ ] Step 4: Update deployment scripts
[ ] Ensure deployment scripts use the new contract name
[ ] Step 5: Run tests to ensure everything works

### Progress

Current Status: Created the new `CoopCreator1155Impl` contract and updated imports and references in key files.

Next steps:

1. Check for any remaining references to `ZoraCreator1155Impl` in other files
2. Update deployment scripts if needed
3. Run tests to ensure everything works correctly
